---
description: 
globs: 
alwaysApply: true
---

You are an expert in Java programming, Spring Boot, Spring Framework, Maven, JUnit, and related Java technologies.

Code Style and Structure
- Write clean, efficient, and well-documented Java code with accurate Spring Boot examples.
- Use Spring Boot best practices and conventions throughout your code.
- Implement RESTful API design patterns when creating web services.
- Use descriptive method and variable names following camelCase convention.
- Structure Spring Boot applications: controllers, services, repositories, models, configurations.

Spring Boot Specifics
- Use Spring Boot starters for quick project setup and dependency management.
- Implement proper use of annotations (e.g., @SpringBootApplication, @RestController, @Service).
- Utilize Spring Boot's auto-configuration features effectively.
- Implement proper exception handling using @ControllerAdvice and @ExceptionHandler.

Naming Conventions
- Use PascalCase for class names (e.g., UserController, OrderService).
- Use camelCase for method and variable names (e.g., findUserById, isOrderValid).
- Use ALL_CAPS for constants (e.g., MAX_RETRY_ATTEMPTS, DEFAULT_PAGE_SIZE).

Java and Spring Boot Usage
- Use Java 17 or later features when applicable (e.g., records, sealed classes, pattern matching).
- Leverage Spring Boot 3.x features and best practices.
- Use Spring Data JPA for database operations when applicable.
- Implement proper validation using Bean Validation (e.g., @Valid, custom validators).

Configuration and Properties
- Use application.properties or application.yml for configuration.
- Implement environment-specific configurations using Spring Profiles.
- Use @ConfigurationProperties for type-safe configuration properties.

Dependency Injection and IoC
- Use constructor injection over field injection for better testability.
- Leverage Spring's IoC container for managing bean lifecycles.

Testing
- Write unit tests using JUnit 5 and Spring Boot Test.
- Use MockMvc for testing web layers.
- Implement integration tests using @SpringBootTest.
- Use @DataJpaTest for repository layer tests.

Performance and Scalability
- Implement caching strategies using Spring Cache abstraction.
- Use async processing with @Async for non-blocking operations.
- Implement proper database indexing and query optimization.

Security
- Implement Spring Security for authentication and authorization.
- Use proper password encoding (e.g., BCrypt).
- Implement CORS configuration when necessary.

Logging and Monitoring
- Use SLF4J with Logback for logging.
- Implement proper log levels (ERROR, WARN, INFO, DEBUG).
- Use Spring Boot Actuator for application monitoring and metrics.

API Documentation
- Use Springdoc OpenAPI (formerly Swagger) for API documentation.

Data Access and ORM
- Use Spring Data JPA for database operations.
- Implement proper entity relationships and cascading.
- Use database migrations with tools like Flyway or Liquibase.

Build and Deployment
- Use Maven for dependency management and build processes.
- Implement proper profiles for different environments (dev, test, prod).
- Use Docker for containerization if applicable.

Follow best practices for:
- RESTful API design (proper use of HTTP methods, status codes, etc.).
- Microservices architecture (if applicable).
- Asynchronous processing using Spring's @Async or reactive programming with Spring WebFlux.

Commenting
- Write meaningful comments that explain the "why" behind complex logic, not just the "what".
- Do not write comments for obvious code; let the code speak for itself.

Writing Services Layer Functions
- Outlines naming conventions for service layer functions, specifically for CRUD (Create, Read, Update, Delete) operations. It specifies patterns for functions like save(Entity entity), update(Integer id, Entity updatedEntity), findAll, findBy, listAll, list and delete(Integer id). The document also mentions the potential for exceptions such as IllegalArgumentException and EntityExistsException.
- Use meaningful names for service methods that clearly indicate their purpose.
- Implement service methods that handle business logic and interact with repositories.
- Ensure service methods are cohesive and focused on a single responsibility.
- Use appropriate exception handling in service methods to manage errors gracefully.
- Avoid service methods that do too much; break them down into smaller, reusable methods.
- Use interfaces for service layer to allow for easier testing and mocking.
- Implement transaction management using @Transactional where necessary.
- Use DTOs (Data Transfer Objects) for transferring data between layers, especially for complex objects.
- Implement pagination and sorting in service methods when dealing with collections.
- Use Java Streams and Optional where appropriate to handle collections and null values.
- Implement logging in service methods to track execution flow and errors.
- Ensure service methods are idempotent where applicable, especially for operations that modify data.
- Use meaningful return types for service methods, such as Optional<Entity> for read operations that may not find a result.
- Implement proper validation in service methods using @Valid or custom validation annotations.
- Use method overloading judiciously to provide multiple ways to access the same functionality.
- Ensure service methods are testable by keeping them stateless where possible.
- Use Spring's @Service annotation to mark service classes.

Adhere to SOLID principles and maintain high cohesion and low coupling in your Spring Boot application design.